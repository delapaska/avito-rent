{
    "swagger": "2.0",
    "info": {
        "description": "This is an API for a test job in Avito",
        "title": "Avito-Rent API",
        "contact": {},
        "version": "1.0"
    },
    "paths": {
        "/dummyLogin": {
            "get": {
                "description": "Получение JWT токена для dummy пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Dummy login",
                "parameters": [
                    {
                        "enum": [
                            "client",
                            "moderator"
                        ],
                        "type": "string",
                        "example": "client",
                        "description": "Type of the user",
                        "name": "userType",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "schema": {
                            "$ref": "#/definitions/utils.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/flat/create": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new flat with provided details. Requires authorization for both moderator and client.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create Flat",
                "parameters": [
                    {
                        "description": "Flat details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.FlatPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Flat created",
                        "schema": {
                            "$ref": "#/definitions/models.Flat"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/flat/update": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update the status of a flat. Requires moderator access.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update Flat Status",
                "parameters": [
                    {
                        "description": "Update status details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateStatusPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Flat status updated",
                        "schema": {
                            "$ref": "#/definitions/models.Flat"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/house/create": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new house. Requires moderator access.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create House",
                "parameters": [
                    {
                        "description": "House details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.HousePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "House created",
                        "schema": {
                            "$ref": "#/definitions/models.House"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/house/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve flats for a specific house. Requires authorization for both moderator and client.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get House Flats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "House ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Flats retrieved",
                        "schema": {
                            "$ref": "#/definitions/utils.FlatsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/house/{id}/subscribe": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Subscribe to updates for a specific house. Requires authorization for both moderator and client.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Subscribe to House",
                "parameters": [
                    {
                        "type": "string",
                        "description": "House ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Subscription details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SubscribePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscription successful",
                        "schema": {
                            "$ref": "#/definitions/utils.SubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login with user credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginUserPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "schema": {
                            "$ref": "#/definitions/utils.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "description": "Register request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterUserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Flat": {
            "description": "Represents a flat in the system",
            "type": "object",
            "properties": {
                "house_id": {
                    "description": "@Description Unique identifier for the house to which the flat belongs\n@Example 101",
                    "type": "integer"
                },
                "id": {
                    "description": "@Description Unique identifier for the flat\n@Example 1",
                    "type": "integer"
                },
                "price": {
                    "description": "@Description Price of the flat\n@Example 1200",
                    "type": "integer"
                },
                "rooms": {
                    "description": "@Description Number of rooms in the flat\n@Example 3",
                    "type": "integer"
                },
                "status": {
                    "description": "@Description Status of the flat\n@Example \"created\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.FlatStatus"
                        }
                    ]
                }
            }
        },
        "models.FlatPayload": {
            "description": "Payload for creating a new flat",
            "type": "object",
            "required": [
                "house_id",
                "price",
                "rooms"
            ],
            "properties": {
                "house_id": {
                    "description": "@Description Unique identifier of the house to which the flat belongs\n@Example 101",
                    "type": "integer"
                },
                "price": {
                    "description": "@Description Price of the flat\n@Example 1200",
                    "type": "integer"
                },
                "rooms": {
                    "description": "@Description Number of rooms in the flat\n@Example 3",
                    "type": "integer"
                }
            }
        },
        "models.FlatStatus": {
            "description": "Status of a flat",
            "type": "string",
            "enum": [
                "created",
                "approved",
                "declined",
                "on moderate"
            ],
            "x-enum-varnames": [
                "StatusCreated",
                "StatusApproved",
                "StatusDeclined",
                "StatusOnModeration"
            ]
        },
        "models.House": {
            "description": "House представляет собой структуру данных для хранения информации о доме.",
            "type": "object",
            "properties": {
                "address": {
                    "description": "@description Адрес дома\n@example \"123 Elm Street\"",
                    "type": "string"
                },
                "created_at": {
                    "description": "@description Дата создания записи\n@example \"2024-08-04T00:00:00Z\"",
                    "type": "string"
                },
                "developer": {
                    "description": "@description Разработчик или строитель дома\n@example \"XYZ Construction\"",
                    "type": "string"
                },
                "id": {
                    "description": "@description Идентификатор дома\n@example 1",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "@description Дата последнего обновления записи\n@example \"2024-08-04T00:00:00Z\"",
                    "type": "string"
                },
                "year": {
                    "description": "@description Год постройки\n@example 2020",
                    "type": "integer"
                }
            }
        },
        "models.HousePayload": {
            "description": "HousePayload представляет собой структуру данных для создания или обновления информации о доме.",
            "type": "object",
            "required": [
                "address",
                "year"
            ],
            "properties": {
                "address": {
                    "description": "@description Адрес дома\n@example \"123 Elm Street\"",
                    "type": "string"
                },
                "developer": {
                    "description": "@description Разработчик или строитель дома\n@example \"XYZ Construction\"",
                    "type": "string"
                },
                "year": {
                    "description": "@description Год постройки\n@example 2020",
                    "type": "integer"
                }
            }
        },
        "models.LoginUserPayload": {
            "description": "Payload for user login",
            "type": "object",
            "required": [
                "id",
                "password"
            ],
            "properties": {
                "id": {
                    "description": "@example f47ac10b-58cc-4372-a567-0e02b2c3d479",
                    "type": "string"
                },
                "password": {
                    "description": "@example securePassword123",
                    "type": "string"
                }
            }
        },
        "models.RegisterUserPayload": {
            "description": "Payload for user registration",
            "type": "object",
            "required": [
                "email",
                "password",
                "userType"
            ],
            "properties": {
                "email": {
                    "description": "@example user@example.com",
                    "type": "string"
                },
                "password": {
                    "description": "@example securePassword123",
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 3
                },
                "userType": {
                    "description": "@example client",
                    "type": "string",
                    "enum": [
                        "client",
                        "moderator"
                    ]
                }
            }
        },
        "models.SubscribePayload": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "models.UpdateStatusPayload": {
            "description": "Payload for updating the status of a flat",
            "type": "object",
            "required": [
                "id",
                "status"
            ],
            "properties": {
                "id": {
                    "description": "@Description Unique identifier of the flat to update\n@Example 1",
                    "type": "integer"
                },
                "status": {
                    "description": "@Description Status to update the flat to\n@Enum created,approved,declined,on moderate\n@Example \"approved\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.FlatStatus"
                        }
                    ]
                }
            }
        },
        "utils.ErrorResponse": {
            "description": "Error response structure",
            "type": "object",
            "properties": {
                "code": {
                    "description": "@example 400",
                    "type": "integer"
                },
                "message": {
                    "description": "@example \"Invalid input\""
                },
                "request_id": {
                    "description": "@example \"12345\""
                }
            }
        },
        "utils.FlatsResponse": {
            "description": "Response model for retrieving flats in a house",
            "type": "object",
            "properties": {
                "flats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Flat"
                    }
                }
            }
        },
        "utils.LoginResponse": {
            "description": "Successful login response structure",
            "type": "object",
            "properties": {
                "token": {
                    "description": "@example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"",
                    "type": "string"
                }
            }
        },
        "utils.RegisterResponse": {
            "description": "Successful registration response structure",
            "type": "object",
            "properties": {
                "user_id": {
                    "description": "@example \"a4b4a122-11c1-4b52-bd95-4a5d3c4be616\"",
                    "type": "string"
                }
            }
        },
        "utils.SubscriptionResponse": {
            "description": "Response model for subscription confirmation",
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "request_id": {}
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}